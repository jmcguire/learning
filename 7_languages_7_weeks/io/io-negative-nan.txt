## SequenceTest.io

assertEquals(Number constants nan asString, "" asNumber asString)


## Number.io

    constants := Object clone do{
        ...
        nan := 0/0


## Command Line

Io> Number constants
nan = -nan

Io> 0/0
==> -nan


## IoNumber.c

    IO_METHOD(IoNumber, divide)
    {
        /*doc Number /(aNumber)
        Returns a new number with the value of the receiver divided by aNumber.
        */
        
        IoNumber *other = IoMessage_locals_numberArgAt_(m, locals, 0);
        return IONUMBER(DATA(self) / DATA(other));
    }

    IoNumber *IoNumber_newWithDouble_(void *state, double n)
    {
        IoNumber *proto = IoState_protoWithId_((IoState *)state, protoId);
        IoNumber *self = IOCLONE(proto); // since Numbers have no refs, we can avoid IOCLONE
        DATA(self) = n;
        return self;
    }

    #define DATA(self) CNUMBER(self)


## IoNumber.h

    #define IONUMBER(num) IoState_numberWithDouble_((IoState*)IOSTATE, (double)num)
    #define CNUMBER(self) IoObject_dataDouble((IoNumber *)self)


## IoState_symbols.c

    IoObject *IoState_numberWithDouble_(IoState *self, double n)
    {
        long i = (long)n;

        if (self->cachedNumbers && i == n && i >= MIN_CACHED_NUMBER && i <= MAX_CACHED_NUMBER)
        {
            return List_at_(self->cachedNumbers, i - MIN_CACHED_NUMBER);
        }

        return IoNumber_newWithDouble_(self, n);
    }


## IoObject_struct.h

    #define IoObject_dataDouble(self)           IoObject_deref(self)->data.d

